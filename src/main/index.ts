import { app, BrowserWindow, ipcMain, IpcMainInvokeEvent } from 'electron'

import { Message } from '@/types/message'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

/**
 * Handle creating/removing shortcuts on Windows when installing/uninstalling.
**/
if (require('electron-squirrel-startup')) {
	app.quit()
}

const createWindow = (): void => {
	const mainWindow = new BrowserWindow({
		height: 600,
		width: 800,
		webPreferences: {
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		}})

	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY) // Load the index.html of the app.
	mainWindow.webContents.openDevTools()
}

app.on('ready', createWindow)

/** 
 * Quit when all windows are closed, except on macOS. There, it's common
 * for applications and their menu bar to stay active until the user quits
 * explicitly with Cmd + Q.
**/
app.on('window-all-closed', () => {
	if (process.platform !== 'darwin') {
		app.quit()
	}
})

/**
 * On OS X it's common to re-create a window in the app when the dock icon is clicked and there are no other windows open.
**/
app.on('activate', () => {
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow()
	}
})


ipcMain.handle('ipc:action:async', async (event: IpcMainInvokeEvent, arg: Message) => {
	console.log(`Hello from the Main process. Received message id: ${arg.id} and Value: ${arg.value}`)
	
	return new Promise((resolve) => {
		setTimeout(() => {
			resolve('Hello from the Main process')
		}, 1000)
	})
})